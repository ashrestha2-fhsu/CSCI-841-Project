package CSCI_841_Project.backend.entity;

import CSCI_841_Project.backend.enums.AccountType;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor

@Entity
@Table(name = "accounts")
public class Account {
    /**
     * Unique account ID (Primary key)
     * Auto-generated by the database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "account_id")
    private Long accountId;

    /**
     * Foreign key linking this account to a user
     * Ensures that each account belongs to a specific user
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * Name of the account (e.g., "Savings Account", "Personal Wallet").
     * Required field.
     */
    @Column(name = "name", nullable = false, length = 50)
    @NotBlank(message = "Account name is required")
    private String name;

    /**
     * Type of the account.
     * Must be one of the predefined ENUM values.
     */
    @Column(name = "account_type", nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    private AccountType type;

    /**
     * Current balance in the account.
     * Cannot be negative.
     * Default value is 0.00.
     */
    @Column(name = "balance", nullable = false, precision = 15, scale = 2)
    @DecimalMin(value = "0.00", message ="balance cannot be negative")
    private BigDecimal balance = BigDecimal.ZERO;

    /**
     * Currency code (ISO 4217 format, e.g., "USD", "EUR").
     * Defaults to "USD".
     */
    @Column(name = "currency", nullable = false, length = 3)
    @Pattern(regexp = "^[A-Z]{3}$", message = "Currency must be a valid 3-letter ISO code")
    private String currency = "USD";

    /**
     * Name of the financial institution (e.g., "Bank of America").
     * Optional field.
     */
//    @Column(name = "institution_name", length = 100)
//    private String institutionName;

    /**
     * Account number for bank accounts.
     * Must be unique.
     */
    @Column(name = "account_number", unique = true, length = 50)
    private String accountNumber;

    /**
     * Interest rate applicable to the account (if any).
     * Cannot be negative.
     */
    @Column(name = "interest_rate", precision = 5, scale = 2)
    @DecimalMin(value = "0.00", message = "Interest rate cannot be negative")
    private BigDecimal interestRate;

    /**
     * Marks whether this is the default account for the user.
     * Defaults to false.
     */
    @Column(name = "is_default", nullable = false)
    private boolean isDefault = false;

    /**
     * Soft delete flag to prevent accidental deletion.
     * Instead of removing the account, set this flag to TRUE.
     */
    @Column(name = "is_deleted", nullable = false)
    private  boolean isDeleted = false;

    /**
     * Timestamp for when the account was created.
     * Automatically set when a new record is inserted.
     */
    @Column(name = "date_created", updatable = false)
    private LocalDateTime dateCreated = LocalDateTime.now();

    /**
     * Timestamp for when the account was last updated.
     * Automatically updates on modification.
     */
    @Column(name = "date_updated")
    private LocalDateTime dateUpdated = LocalDateTime.now();

    /**
     * Lifecycle hook to update the timestamp before updating.
     */
    @PreUpdate
    protected void onUpdate() {
        this.dateUpdated = LocalDateTime.now();
    }


    // CONSTRUCTOR
//    public Account(){}
//    public Account(Long accountId, User user, String name, AccountType type, BigDecimal balance, String currency,
//                   String accountNumber, BigDecimal interestRate, boolean isDefault, boolean isDeleted,
//                   LocalDateTime dateCreated, LocalDateTime dateUpdated) {
//        this.accountId = accountId;
//        this.user = user;
//        this.name = name;
//        this.type = type;
//        this.balance = balance;
//        this.currency = currency;
//        this.accountNumber = accountNumber;
//        this.interestRate = interestRate;
//        this.isDefault = isDefault;
//        this.isDeleted = isDeleted;
//        this.dateCreated = dateCreated;
//        this.dateUpdated = dateUpdated;
//    }

    // GETTER AND SETTER


}